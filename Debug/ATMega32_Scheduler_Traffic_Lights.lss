
ATMega32_Scheduler_Traffic_Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000564  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001039  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000801  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057b  00000000  00000000  00002ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000346d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  74:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_write_bit>:
	}
	else{
		DIO_write_bit(PORT_NAME, PIN_NO, HIGH);
	}
	return;
}
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	91 05       	cpc	r25, r1
  80:	51 f1       	breq	.+84     	; 0xd6 <DIO_write_bit+0x5a>
  82:	1c f4       	brge	.+6      	; 0x8a <DIO_write_bit+0xe>
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	49 f0       	breq	.+18     	; 0x9a <DIO_write_bit+0x1e>
  88:	08 95       	ret
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	91 05       	cpc	r25, r1
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_write_bit+0x16>
  90:	40 c0       	rjmp	.+128    	; 0x112 <DIO_write_bit+0x96>
  92:	04 97       	sbiw	r24, 0x04	; 4
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_write_bit+0x1c>
  96:	5b c0       	rjmp	.+182    	; 0x14e <DIO_write_bit+0xd2>
  98:	08 95       	ret
  9a:	41 15       	cp	r20, r1
  9c:	51 05       	cpc	r21, r1
  9e:	21 f0       	breq	.+8      	; 0xa8 <DIO_write_bit+0x2c>
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	51 05       	cpc	r21, r1
  a4:	69 f0       	breq	.+26     	; 0xc0 <DIO_write_bit+0x44>
  a6:	08 95       	ret
  a8:	2b b3       	in	r18, 0x1b	; 27
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_write_bit+0x38>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_write_bit+0x34>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	08 95       	ret
  c0:	2b b3       	in	r18, 0x1b	; 27
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_write_bit+0x50>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_write_bit+0x4c>
  d0:	82 2b       	or	r24, r18
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	08 95       	ret
  d6:	41 15       	cp	r20, r1
  d8:	51 05       	cpc	r21, r1
  da:	21 f0       	breq	.+8      	; 0xe4 <DIO_write_bit+0x68>
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	51 05       	cpc	r21, r1
  e0:	69 f0       	breq	.+26     	; 0xfc <DIO_write_bit+0x80>
  e2:	08 95       	ret
  e4:	28 b3       	in	r18, 0x18	; 24
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_write_bit+0x74>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_write_bit+0x70>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	08 95       	ret
  fc:	28 b3       	in	r18, 0x18	; 24
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_write_bit+0x8c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_write_bit+0x88>
 10c:	82 2b       	or	r24, r18
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
 112:	41 15       	cp	r20, r1
 114:	51 05       	cpc	r21, r1
 116:	21 f0       	breq	.+8      	; 0x120 <DIO_write_bit+0xa4>
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	51 05       	cpc	r21, r1
 11c:	69 f0       	breq	.+26     	; 0x138 <DIO_write_bit+0xbc>
 11e:	08 95       	ret
 120:	25 b3       	in	r18, 0x15	; 21
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_write_bit+0xb0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_write_bit+0xac>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	85 bb       	out	0x15, r24	; 21
 136:	08 95       	ret
 138:	25 b3       	in	r18, 0x15	; 21
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_write_bit+0xc8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_write_bit+0xc4>
 148:	82 2b       	or	r24, r18
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	08 95       	ret
 14e:	41 15       	cp	r20, r1
 150:	51 05       	cpc	r21, r1
 152:	21 f0       	breq	.+8      	; 0x15c <DIO_write_bit+0xe0>
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	51 05       	cpc	r21, r1
 158:	69 f0       	breq	.+26     	; 0x174 <DIO_write_bit+0xf8>
 15a:	08 95       	ret
 15c:	22 b3       	in	r18, 0x12	; 18
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_write_bit+0xec>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_write_bit+0xe8>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	82 bb       	out	0x12, r24	; 18
 172:	08 95       	ret
 174:	22 b3       	in	r18, 0x12	; 18
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_write_bit+0x104>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_write_bit+0x100>
 184:	82 2b       	or	r24, r18
 186:	82 bb       	out	0x12, r24	; 18
 188:	08 95       	ret

0000018a <DIO_init_port>:

void DIO_init_port(int /*PORTX (i.e. PORTA, PORTB..)*/ PORT_NAME, uint8_t value){
	switch (PORT_NAME){
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	91 05       	cpc	r25, r1
 18e:	61 f0       	breq	.+24     	; 0x1a8 <DIO_init_port+0x1e>
 190:	1c f4       	brge	.+6      	; 0x198 <DIO_init_port+0xe>
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	39 f0       	breq	.+14     	; 0x1a4 <DIO_init_port+0x1a>
 196:	08 95       	ret
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	91 05       	cpc	r25, r1
 19c:	39 f0       	breq	.+14     	; 0x1ac <DIO_init_port+0x22>
 19e:	04 97       	sbiw	r24, 0x04	; 4
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <DIO_init_port+0x26>
 1a2:	08 95       	ret
		case PORTA:
		PA_DIR = value;
 1a4:	6a bb       	out	0x1a, r22	; 26
		break;
 1a6:	08 95       	ret

		case PORTB:
		PB_DIR = value;
 1a8:	67 bb       	out	0x17, r22	; 23
		break;
 1aa:	08 95       	ret

		case PORTC:
		PC_DIR = value;
 1ac:	64 bb       	out	0x14, r22	; 20
		break;
 1ae:	08 95       	ret

		case PORTD:
		PD_DIR = value;
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <TrafficLights_clear>:

static uint8_t time_in_state = 0;

void TrafficLights_clear(){
	
	DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_RED, LOW);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
	DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_GREEN, LOW);
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
	DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_AMBER, LOW);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
	
	DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_RED, LOW);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
	DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_GREEN, LOW);
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
	DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_AMBER, LOW);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	65 e0       	ldi	r22, 0x05	; 5
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
 214:	08 95       	ret

00000216 <TrafficLights_init>:
	
};

void TrafficLights_init(){
	
	DIO_init_port(PORTA, 255);
 216:	6f ef       	ldi	r22, 0xFF	; 255
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_init_port>
	
	TrafficLights_clear();
 220:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TrafficLights_clear>
	
	traffic_light_state = BOTH_RED;
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_light_state>
	DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_RED, HIGH);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
	DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_RED, HIGH);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
	time_in_state = 3;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	last_active_state = FREE_GREEN;
 250:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <last_active_state>
 254:	08 95       	ret

00000256 <TrafficLights_update>:
}


void TrafficLights_update(){

	switch(traffic_light_state){
 256:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_light_state>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	71 f0       	breq	.+28     	; 0x27a <TrafficLights_update+0x24>
 25e:	30 f4       	brcc	.+12     	; 0x26c <TrafficLights_update+0x16>
 260:	88 23       	and	r24, r24
 262:	d1 f1       	breq	.+116    	; 0x2d8 <TrafficLights_update+0x82>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	09 f4       	brne	.+2      	; 0x26a <TrafficLights_update+0x14>
 268:	57 c0       	rjmp	.+174    	; 0x318 <TrafficLights_update+0xc2>
 26a:	08 95       	ret
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	09 f4       	brne	.+2      	; 0x272 <TrafficLights_update+0x1c>
 270:	73 c0       	rjmp	.+230    	; 0x358 <TrafficLights_update+0x102>
 272:	84 30       	cpi	r24, 0x04	; 4
 274:	09 f4       	brne	.+2      	; 0x278 <TrafficLights_update+0x22>
 276:	90 c0       	rjmp	.+288    	; 0x398 <TrafficLights_update+0x142>
 278:	08 95       	ret
		case BOTH_RED:
			TrafficLights_clear();
 27a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TrafficLights_clear>
			DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_RED, HIGH);
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
			DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_RED, HIGH);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
			if(--time_in_state == 1){
 29e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	09 f0       	breq	.+2      	; 0x2ae <TrafficLights_update+0x58>
 2ac:	93 c0       	rjmp	.+294    	; 0x3d4 <TrafficLights_update+0x17e>
				if (last_active_state == FREE_GREEN){
 2ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <last_active_state>
 2b2:	81 11       	cpse	r24, r1
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <TrafficLights_update+0x72>
					traffic_light_state = BUSY_GREEN;
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_light_state>
					time_in_state = 12;
 2bc:	9c e0       	ldi	r25, 0x0C	; 12
 2be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
					last_active_state = BUSY_GREEN;
 2c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <last_active_state>
 2c6:	08 95       	ret
					}
				else{
					traffic_light_state = FREE_GREEN;
 2c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <traffic_light_state>
					time_in_state = 6;
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
					last_active_state = FREE_GREEN;
 2d2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <last_active_state>
 2d6:	08 95       	ret
					}
			}
			break;
		
		case FREE_GREEN:
			TrafficLights_clear();
 2d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TrafficLights_clear>
			DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_GREEN, HIGH);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
			DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_RED, HIGH);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
			if(--time_in_state == 1){
 2fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 300:	81 50       	subi	r24, 0x01	; 1
 302:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	09 f0       	breq	.+2      	; 0x30c <TrafficLights_update+0xb6>
 30a:	64 c0       	rjmp	.+200    	; 0x3d4 <TrafficLights_update+0x17e>
				traffic_light_state = FREE_PREPARE;
 30c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_light_state>
				time_in_state = 3;
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 316:	08 95       	ret
			}
			break;
		
		case FREE_PREPARE:
		TrafficLights_clear();
 318:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TrafficLights_clear>
		DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_AMBER, HIGH);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
		DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_RED, HIGH);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	63 e0       	ldi	r22, 0x03	; 3
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
		if(--time_in_state == 1){
 33c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 340:	81 50       	subi	r24, 0x01	; 1
 342:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	09 f0       	breq	.+2      	; 0x34c <TrafficLights_update+0xf6>
 34a:	44 c0       	rjmp	.+136    	; 0x3d4 <TrafficLights_update+0x17e>
			traffic_light_state = BOTH_RED;
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_light_state>
			time_in_state = 2;
 352:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 356:	08 95       	ret
		}
		break;
		
		case BUSY_GREEN:
		TrafficLights_clear();
 358:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TrafficLights_clear>
		DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_RED, HIGH);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
		DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_GREEN, HIGH);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	64 e0       	ldi	r22, 0x04	; 4
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
		if(--time_in_state == 1){
 37c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 380:	81 50       	subi	r24, 0x01	; 1
 382:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	29 f5       	brne	.+74     	; 0x3d4 <TrafficLights_update+0x17e>
			traffic_light_state = BUSY_PREPARE;
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_light_state>
			time_in_state = 3;
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 396:	08 95       	ret
		}
		break;
		
		case BUSY_PREPARE:
		TrafficLights_clear();
 398:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TrafficLights_clear>
		DIO_write_bit(FREE_STREET_PORT, FREE_LIGHT_RED, HIGH);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
		DIO_write_bit(BUSY_STREET_PORT, BUSY_LIGHT_AMBER, HIGH);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	65 e0       	ldi	r22, 0x05	; 5
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_write_bit>
		if(--time_in_state == 1){
 3bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3c0:	81 50       	subi	r24, 0x01	; 1
 3c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <TrafficLights_update+0x17e>
			traffic_light_state = BOTH_RED;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_light_state>
			time_in_state = 2;
 3d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 3d4:	08 95       	ret

000003d6 <main>:
#include "Scheduler/Scheduler.h"
#include "TrafficLights/TrafficLights.h"

int main(void)
{
    TrafficLights_init();
 3d6:	0e 94 0b 01 	call	0x216	; 0x216 <TrafficLights_init>

    SCH_init();
 3da:	0e 94 51 02 	call	0x4a2	; 0x4a2 <SCH_init>

    SCH_add_task(TrafficLights_update, 0, 1000);
 3de:	48 ee       	ldi	r20, 0xE8	; 232
 3e0:	53 e0       	ldi	r21, 0x03	; 3
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	8b e2       	ldi	r24, 0x2B	; 43
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SCH_add_task>
	
    SCH_start();
 3ee:	0e 94 0f 02 	call	0x41e	; 0x41e <SCH_start>

    while(1){
        SCH_dispatch_tasks();
 3f2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <SCH_dispatch_tasks>
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <main+0x1c>

000003f8 <SCH_add_task>:
        }
    }

}

void SCH_report_status(){
 3f8:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <scheduler_tasks>
 3fc:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <scheduler_tasks+0x1>
 400:	23 2b       	or	r18, r19
 402:	59 f4       	brne	.+22     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 404:	e3 e6       	ldi	r30, 0x63	; 99
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	91 83       	std	Z+1, r25	; 0x01
 40a:	80 83       	st	Z, r24
 40c:	73 83       	std	Z+3, r23	; 0x03
 40e:	62 83       	std	Z+2, r22	; 0x02
 410:	55 83       	std	Z+5, r21	; 0x05
 412:	44 83       	std	Z+4, r20	; 0x04
 414:	16 82       	std	Z+6, r1	; 0x06
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	08 95       	ret

0000041e <SCH_start>:
 41e:	89 b7       	in	r24, 0x39	; 57
 420:	80 61       	ori	r24, 0x10	; 16
 422:	89 bf       	out	0x39, r24	; 57
 424:	78 94       	sei
 426:	08 95       	ret

00000428 <__vector_7>:
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
 43a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <scheduler_tasks>
 43e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <scheduler_tasks+0x1>
 442:	89 2b       	or	r24, r25
 444:	c9 f0       	breq	.+50     	; 0x478 <__vector_7+0x50>
 446:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <scheduler_tasks+0x2>
 44a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <scheduler_tasks+0x3>
 44e:	00 97       	sbiw	r24, 0x00	; 0
 450:	71 f4       	brne	.+28     	; 0x46e <__vector_7+0x46>
 452:	e3 e6       	ldi	r30, 0x63	; 99
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	86 81       	ldd	r24, Z+6	; 0x06
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	86 83       	std	Z+6, r24	; 0x06
 45c:	84 81       	ldd	r24, Z+4	; 0x04
 45e:	95 81       	ldd	r25, Z+5	; 0x05
 460:	00 97       	sbiw	r24, 0x00	; 0
 462:	51 f0       	breq	.+20     	; 0x478 <__vector_7+0x50>
 464:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <scheduler_tasks+0x3>
 468:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <scheduler_tasks+0x2>
 46c:	05 c0       	rjmp	.+10     	; 0x478 <__vector_7+0x50>
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <scheduler_tasks+0x3>
 474:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <scheduler_tasks+0x2>
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <SCH_delete_task>:

}

void SCH_delete_task(const uint8_t index){

    if(index < SCH_MAX_TASKS){
 48a:	81 11       	cpse	r24, r1
 48c:	09 c0       	rjmp	.+18     	; 0x4a0 <SCH_delete_task+0x16>
        scheduler_tasks[index].go_to_function = 0;
 48e:	e3 e6       	ldi	r30, 0x63	; 99
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	11 82       	std	Z+1, r1	; 0x01
 494:	10 82       	st	Z, r1
        scheduler_tasks[index].delay_to_start = 0;
 496:	13 82       	std	Z+3, r1	; 0x03
 498:	12 82       	std	Z+2, r1	; 0x02
        scheduler_tasks[index].period = 0;
 49a:	15 82       	std	Z+5, r1	; 0x05
 49c:	14 82       	std	Z+4, r1	; 0x04
        scheduler_tasks[index].run_me = 0;
 49e:	16 82       	std	Z+6, r1	; 0x06
 4a0:	08 95       	ret

000004a2 <SCH_init>:
sTask scheduler_tasks[SCH_MAX_TASKS];

void SCH_init(){
    uint8_t index;
    for(index = 0; index < SCH_MAX_TASKS; ++index){
        SCH_delete_task(index);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 45 02 	call	0x48a	; 0x48a <SCH_delete_task>
    }

    //Set up and start timer

    // Write 0x00 to TCNT1 register
    TCNT1H = 0x00;
 4a8:	1d bc       	out	0x2d, r1	; 45
    TCNT1L = 0x00;
 4aa:	1c bc       	out	0x2c, r1	; 44

    // Load OCR1A with 1000 (1000 oscillations = 1ms)
    OCR1AH = 0x03;
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	8b bd       	out	0x2b, r24	; 43
    OCR1AL = 0xE8;
 4b0:	88 ee       	ldi	r24, 0xE8	; 232
 4b2:	8a bd       	out	0x2a, r24	; 42

    //Activate timer in CTC (clear timer on compare match) mode (auto-reload)
    //with prescaler set to 8
    TCCR1A = 0x00;
 4b4:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x09;
 4b6:	89 e0       	ldi	r24, 0x09	; 9
 4b8:	8e bd       	out	0x2e, r24	; 46
 4ba:	08 95       	ret

000004bc <SCH_dispatch_tasks>:
    }


}

void SCH_dispatch_tasks(){
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
    uint8_t index;

    for(index = 0; index < SCH_MAX_TASKS; index++){
        if(scheduler_tasks[index].run_me){
 4c0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <scheduler_tasks+0x6>
 4c4:	88 23       	and	r24, r24
 4c6:	79 f0       	breq	.+30     	; 0x4e6 <SCH_dispatch_tasks+0x2a>
            (*scheduler_tasks[index].go_to_function)();
 4c8:	c3 e6       	ldi	r28, 0x63	; 99
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
 4cc:	e8 81       	ld	r30, Y
 4ce:	f9 81       	ldd	r31, Y+1	; 0x01
 4d0:	09 95       	icall
            scheduler_tasks[index].run_me -= 1;
 4d2:	8e 81       	ldd	r24, Y+6	; 0x06
 4d4:	81 50       	subi	r24, 0x01	; 1
 4d6:	8e 83       	std	Y+6, r24	; 0x06
            if(scheduler_tasks[index].period == 0){
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	9d 81       	ldd	r25, Y+5	; 0x05
 4dc:	89 2b       	or	r24, r25
 4de:	19 f4       	brne	.+6      	; 0x4e6 <SCH_dispatch_tasks+0x2a>
                SCH_delete_task(index);
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 45 02 	call	0x48a	; 0x48a <SCH_delete_task>
        }
    }

    SCH_report_status();

}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
